module Single_Cycle_Top_Tb;

  reg clk;
  reg rst;

  // DUT (Device Under Test) 와 연결될 신호들
  wire [31:0] PC_Top, RD_Instr, ALUResult, Result;
  wire [31:0] WriteData;
  wire [31:0] ReadData;
  wire MemWrite;

  // DUT 인스턴스화
  Single_Cycle_Top DUT #(.N(32))(
      .clk(clk),
      .rst(rst)
  );

  // 클럭 생성
  always #5 clk = ~clk;

  initial begin
    // 시뮬레이션 로그 초기화
    $dumpfile("Single_Cycle_Top_Tb.vcd");
    $dumpvars(0, Single_Cycle_Top_Tb);

    // 초기화
    clk = 0;
    rst = 0;

    // 리셋 비활성화
    #10 rst = 1;

    // R-type 명령어 테스트 (ADD)
    // Register x1 = 5, x2 = 10 -> ADD x3 = x1 + x2
    #20;
    if (DUT.reg_out3 !== 15) begin
      $display("R-type ADD instruction failed. x3 값: %d", DUT.reg_out3);
    end else begin
      $display("R-type ADD instruction success");
    end

    // I-type 명령어 테스트 (ADDI)
    // x1 + imm(10) -> x2
    #40;
    if (DUT.reg_out2 !== DUT.reg_out1 + 10) begin
      $display("I-type ADDI instruction failed. x2 값: %d", DUT.reg_out2);
    end else begin
      $display("I-type ADDI instruction success");
    end

    // S-type 명령어 테스트 (SW)
    // x2의 값을 메모리 주소 ALUResult에 저장
    #60;
    if (DUT.Data_Memory.Data_MEM[ALUResult] !== DUT.reg_out2) begin
      $display("S-type SW instruction failed. 메모리 값: %d", DUT.Data_Memory.Data_MEM[ALUResult]);
    end else begin
      $display("S-type SW Success");
    end

    // 시뮬레이션 종료
    #1000 $finish;
  end

endmodule
